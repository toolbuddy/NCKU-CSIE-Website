import languages from 'settings/language/config.js';
const apiURL = `${ window.location.protocol }//${ window.location.host }/api/announcement`;

export class Announcement {
    /**
     * Id: 0 for create, positive integer for update
     * author: should take from session
     * timeStamp: could be createTime or updateTime (should it be generated by frontend or backend?)
     * isPinned: specift if this announcement is pinned
     * isPublish: specify if this announcement is published
     * zhTW: an object contains title and content in Chinese
     * enUS: an object contains title and content in English
     * file: an array contains file object / instance of File
     * tag: an array contains tag id
     */

    constructor ( id = 0 ) {
        this.id = id;
        this.author = '';
        this.updateTime = null;
        this.isPinned = false;
        this.isPublished = false;
        languages.support.forEach( ( language ) => {
            this[ language ] = {
                title:   '',
                content: '',
                files:   [],
            };
        } );
        this.tags = [];
    }

    async getBody () {
        if ( !this.id )
            return;
        const data = await fetch( `${ apiURL }/all-languages/${ this.id }` ).then( res => res.json() );
        this.author = data.author;
        this.updateTime = data.updateTime;
        this.isPinned = data.isPinned;
        this.isPublished = data.isPublished;
        languages.support.forEach( ( language ) => {
            this[ language ].title = data[ language ].title;
            this[ language ].content = data[ language ].content;
        } );
        this.tags = data.tags;
    }

    setTitleContent ( language, title, content ) {
        if ( title === '' )
            throw new Error( `Title of ${ language } can't be empty.` );

        if ( content === '' )
            throw new Error( `Content of ${ language } can't be empty.` );

        this[ language ].title = title;
        this[ language ].content = content;
    }

    create () {
        if ( this.id === 0 ) {
            // If this announcement hasn't existed
            fetch( `${ apiURL }/`, {
                method:  'POST',
                body:    this.toString(),
                headers: new Headers( {
                    'Content-Type': 'application/json',
                } ),
            } )
            .then( res => res.json() );
        }
    }

    update () {
        if ( this.id === 0 )
            return;
        fetch( `${ apiURL }/${ this.id }`, {
            method:  'PATCH',
            body:    this.toString(),
            headers: new Headers( {
                'Content-Type': 'application/json',
            } ),
        } )
        .then( res => res.json() );
    }

    /*
    AppendFile () {

    }

    removeFile () {

    }
    */

    appendTag ( tag ) {
        if ( this.tags.indexOf( tag ) === -1 )
            this.tags.push( tag );
    }

    removeTag ( tag ) {
        if ( this.tags.indexOf( tag ) !== -1 )
            this.tags.splice( this.tags.indexOf( tag ), 1 );
    }

    toString () {
        return JSON.stringify( this );
    }
}
